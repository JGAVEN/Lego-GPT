name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install ruff, coverage and project deps
        run: |
          pip install ruff coverage
          pip install -e ./backend[test,env]

      - name: Run ruff
        run: ruff check backend detector scripts

      - name: Run tests with coverage
        run: |
          coverage run -m unittest discover -v
          coverage xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.5.2

      - name: Install front-end dependencies
        run: pnpm install --frozen-lockfile --dir frontend

      - name: Run front-end lint
        run: pnpm --dir frontend run lint

      - name: Start Redis
        run: docker run -d -p 6379:6379 --name redis redis:7

      - name: Start API server
        env:
          JWT_SECRET: benchmark
        run: |
          python backend/gateway.py --jwt-secret $JWT_SECRET &
          echo $! > server.pid

      - name: Start worker
        env:
          JWT_SECRET: benchmark
        run: |
          python backend/worker.py --redis-url redis://localhost:6379/0 &
          echo $! > worker.pid

      - name: Run scalability benchmark
        run: |
          sleep 5
          token=$(python scripts/generate_jwt.py --secret benchmark --exp 60)
          python scripts/benchmark_scalability.py --token $token --requests 4 --concurrency 2

      - name: Stop services
        if: always()
        run: |
          kill $(cat server.pid) || true
          kill $(cat worker.pid) || true
          docker stop redis
          docker rm redis
      # 6. (Optional) Build dev Docker image
      # - name: Build Docker image
      #   run: docker build -f Dockerfile.dev -t lego-gpt-dev .
